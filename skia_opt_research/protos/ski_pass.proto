syntax = "proto3";

package ski_pass_proto;

/*
    SkRecords parallels src/core/SkRecords.h
    SkRecord parallels src/core/SkRecord.h

    SkRecords represents the different type of draw commands.
    SkRecord is a collection of SkRecords.
*/

message SkColor {
    int32 alpha_u8 = 1;
    int32 red_u8 = 2;
    int32 green_u8 = 3;
    int32 blue_u8 = 4;
}

enum BlendMode {
    UNKNOWN = 0;
    SRC_OVER = 1;
    SRC = 2;
}

message SkPaint {
    SkColor color = 1;
    
    message Blender {
        BlendMode blend_mode = 1;
    }
    Blender blender = 3;

    message ImageFilter {}
    ImageFilter image_filter = 4;

    message ColorFilter {}
    ColorFilter color_filter = 5;

    message PathEffect {}
    PathEffect path_effect = 6;

    message MaskFilter {}
    MaskFilter mask_filter = 7;

    message Shader {}
    Shader shader = 8;

    
}

message Bounds {
    double left = 1;
    double top = 2;
    double right = 3;
    double bottom = 4;
}
message Backdrop {}


message SkRecords  {
    // Index of this record in the SkRecords.
    // This is used to make parsing easier.
    // SkRecord will hold SkRecords in order.
    int32 index = 1;;

    message ClipRect {
        Bounds bounds = 1;
    };

    message SaveLayer {
        Bounds bounds = 1;
        SkPaint paint = 2;
        Backdrop backdrop = 3;
    };

    message Save {};
    message Restore {};
    message DrawCommand {
        string name = 1;
        SkPaint paint = 2;
    }
    oneof command {
        SaveLayer save_layer = 2;
        Save save = 3;
        Restore restore = 4;
        DrawCommand draw_command = 5;
        ClipRect clip_rect = 6;
    }
}

message SkRecord {
    repeated SkRecords records = 1;
}

message SkiPassRunInfo {
    enum SkiPassRunStatus {
        UNKONWN = 0;
        OK = 1;
        FAILED = 2;
    }
    SkiPassRunStatus status = 1;

    // SkRecords that SkiPass didn't care about for this run.
    repeated SkRecords ignored_records = 2;

    message SkiPassRunError {
        string error_message = 1;
    }
    SkiPassRunError error = 3;

    // Debug info
    string skilang_expr = 4;
    string extracted_skilang_expr = 5;
    SkRecord input_record = 6;
}

/*
    A SkiPassProgram is the list of SkiPassInstruction to perform
    to reconstruct the Skp in optimal order (according to SkiPass). 
*/
message SkiPassInstruction {
    // Copy over the SkRecord in the original SKP.
    message SkiPassCopyRecord {
        int32 index = 1;
        // TODO: Copy the command but fold the alpha into the command's paint.
        // Deprecate this field.
	    int32 alpha = 2;
        SkPaint paint = 3;
    }
    message SaveLayer {
        SkPaint paint = 1;
        Bounds bounds = 2;
        Backdrop backdrop = 3;
    }

    message ClipRect {
        Bounds bounds = 1;
    }

    message Save {}
    message Restore {}
    oneof instruction {
        SkiPassCopyRecord copy_record = 1;
        SaveLayer save_layer = 2;
        Save save = 3;
        Restore restore = 4;
        ClipRect clip_rect = 5;
    }
}

message SkiPassProgram {
    repeated SkiPassInstruction instructions = 1;
}

message SkiPassRunResult {
    SkiPassProgram program = 1;
    SkiPassRunInfo run_info = 2;
}
