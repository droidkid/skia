syntax = "proto3";

package ski_pass_proto;

/*
    SkRecords parallels src/core/SkRecords.h
    SkRecord parallels src/core/SkRecord.h

    SkRecords represents the different type of draw commands.
    SkRecord is a collection of SkRecords.
*/

message SkRecords  {
    // Index of this record in the SkRecords.
    // This is used to make parsing easier.
    // SkRecord will hold SkRecords in order.
    int32 index = 1;;

    message SaveLayer {};
    message Save {};
    message ClipRect {
        // Insert Rect
    };
    message Restore {};
    message DrawCommand {
        string name = 1;
    }
    oneof command {
        SaveLayer save_layer = 2;
        Save save = 3;
        ClipRect clip_rect = 4;
        Restore restore = 5;
        DrawCommand draw_command = 6;
    }
}

message SkRecord {
    repeated SkRecords records = 1;
}

message SkiPassRunInfo {
    enum SkiPassRunStatus {
        UNKONWN = 0;
        OK = 1;
        FAILED = 2;
    }
    SkiPassRunStatus status = 1;

    // SkRecords that SkiPass didn't care about for this run.
    repeated SkRecords ignored_records = 2;

    message SkiPassRunError {
        string error_message = 1;
    }
    SkiPassRunError error = 3;
}

/*
    A SkiPassProgram is the list of SkiPassInstruction to perform
    to reconstruct the Skp in optimal order (according to SkiPass). 
*/
message SkiPassInstruction {
    // Copy over the SkRecord in the original SKP.
    message SkiPassCopyRecord {
        int32 index = 1;
    }
}

message SkiPassProgram {
    repeated SkiPassInstruction instructions = 1;
}


