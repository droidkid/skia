// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ski_pass.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ski_5fpass_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ski_5fpass_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ski_5fpass_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ski_5fpass_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ski_5fpass_2eproto;
namespace ski_pass {
namespace protos {
class SkiPassRunInfo;
class SkiPassRunInfoDefaultTypeInternal;
extern SkiPassRunInfoDefaultTypeInternal _SkiPassRunInfo_default_instance_;
}  // namespace protos
}  // namespace ski_pass
PROTOBUF_NAMESPACE_OPEN
template<> ::ski_pass::protos::SkiPassRunInfo* Arena::CreateMaybeMessage<::ski_pass::protos::SkiPassRunInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ski_pass {
namespace protos {

enum SkiPassRunStatus : int {
  SUCCESS = 0,
  FAILED = 1,
  SkiPassRunStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SkiPassRunStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SkiPassRunStatus_IsValid(int value);
constexpr SkiPassRunStatus SkiPassRunStatus_MIN = SUCCESS;
constexpr SkiPassRunStatus SkiPassRunStatus_MAX = FAILED;
constexpr int SkiPassRunStatus_ARRAYSIZE = SkiPassRunStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SkiPassRunStatus_descriptor();
template<typename T>
inline const std::string& SkiPassRunStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SkiPassRunStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SkiPassRunStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SkiPassRunStatus_descriptor(), enum_t_value);
}
inline bool SkiPassRunStatus_Parse(
    const std::string& name, SkiPassRunStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SkiPassRunStatus>(
    SkiPassRunStatus_descriptor(), name, value);
}
// ===================================================================

class SkiPassRunInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ski_pass.protos.SkiPassRunInfo) */ {
 public:
  inline SkiPassRunInfo() : SkiPassRunInfo(nullptr) {};
  virtual ~SkiPassRunInfo();

  SkiPassRunInfo(const SkiPassRunInfo& from);
  SkiPassRunInfo(SkiPassRunInfo&& from) noexcept
    : SkiPassRunInfo() {
    *this = ::std::move(from);
  }

  inline SkiPassRunInfo& operator=(const SkiPassRunInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SkiPassRunInfo& operator=(SkiPassRunInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SkiPassRunInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SkiPassRunInfo* internal_default_instance() {
    return reinterpret_cast<const SkiPassRunInfo*>(
               &_SkiPassRunInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SkiPassRunInfo& a, SkiPassRunInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SkiPassRunInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SkiPassRunInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SkiPassRunInfo* New() const final {
    return CreateMaybeMessage<SkiPassRunInfo>(nullptr);
  }

  SkiPassRunInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SkiPassRunInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SkiPassRunInfo& from);
  void MergeFrom(const SkiPassRunInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SkiPassRunInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ski_pass.protos.SkiPassRunInfo";
  }
  protected:
  explicit SkiPassRunInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ski_5fpass_2eproto);
    return ::descriptor_table_ski_5fpass_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputSkpNameFieldNumber = 1,
    kDebugLogFieldNumber = 2,
    kRunStatusFieldNumber = 3,
  };
  // string input_skp_name = 1;
  void clear_input_skp_name();
  const std::string& input_skp_name() const;
  void set_input_skp_name(const std::string& value);
  void set_input_skp_name(std::string&& value);
  void set_input_skp_name(const char* value);
  void set_input_skp_name(const char* value, size_t size);
  std::string* mutable_input_skp_name();
  std::string* release_input_skp_name();
  void set_allocated_input_skp_name(std::string* input_skp_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_input_skp_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_input_skp_name(
      std::string* input_skp_name);
  private:
  const std::string& _internal_input_skp_name() const;
  void _internal_set_input_skp_name(const std::string& value);
  std::string* _internal_mutable_input_skp_name();
  public:

  // string debug_log = 2;
  void clear_debug_log();
  const std::string& debug_log() const;
  void set_debug_log(const std::string& value);
  void set_debug_log(std::string&& value);
  void set_debug_log(const char* value);
  void set_debug_log(const char* value, size_t size);
  std::string* mutable_debug_log();
  std::string* release_debug_log();
  void set_allocated_debug_log(std::string* debug_log);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_debug_log();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_debug_log(
      std::string* debug_log);
  private:
  const std::string& _internal_debug_log() const;
  void _internal_set_debug_log(const std::string& value);
  std::string* _internal_mutable_debug_log();
  public:

  // .ski_pass.protos.SkiPassRunStatus run_status = 3;
  void clear_run_status();
  ::ski_pass::protos::SkiPassRunStatus run_status() const;
  void set_run_status(::ski_pass::protos::SkiPassRunStatus value);
  private:
  ::ski_pass::protos::SkiPassRunStatus _internal_run_status() const;
  void _internal_set_run_status(::ski_pass::protos::SkiPassRunStatus value);
  public:

  // @@protoc_insertion_point(class_scope:ski_pass.protos.SkiPassRunInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_skp_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr debug_log_;
  int run_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ski_5fpass_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SkiPassRunInfo

// string input_skp_name = 1;
inline void SkiPassRunInfo::clear_input_skp_name() {
  input_skp_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SkiPassRunInfo::input_skp_name() const {
  // @@protoc_insertion_point(field_get:ski_pass.protos.SkiPassRunInfo.input_skp_name)
  return _internal_input_skp_name();
}
inline void SkiPassRunInfo::set_input_skp_name(const std::string& value) {
  _internal_set_input_skp_name(value);
  // @@protoc_insertion_point(field_set:ski_pass.protos.SkiPassRunInfo.input_skp_name)
}
inline std::string* SkiPassRunInfo::mutable_input_skp_name() {
  // @@protoc_insertion_point(field_mutable:ski_pass.protos.SkiPassRunInfo.input_skp_name)
  return _internal_mutable_input_skp_name();
}
inline const std::string& SkiPassRunInfo::_internal_input_skp_name() const {
  return input_skp_name_.Get();
}
inline void SkiPassRunInfo::_internal_set_input_skp_name(const std::string& value) {
  
  input_skp_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SkiPassRunInfo::set_input_skp_name(std::string&& value) {
  
  input_skp_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ski_pass.protos.SkiPassRunInfo.input_skp_name)
}
inline void SkiPassRunInfo::set_input_skp_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  input_skp_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ski_pass.protos.SkiPassRunInfo.input_skp_name)
}
inline void SkiPassRunInfo::set_input_skp_name(const char* value,
    size_t size) {
  
  input_skp_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ski_pass.protos.SkiPassRunInfo.input_skp_name)
}
inline std::string* SkiPassRunInfo::_internal_mutable_input_skp_name() {
  
  return input_skp_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SkiPassRunInfo::release_input_skp_name() {
  // @@protoc_insertion_point(field_release:ski_pass.protos.SkiPassRunInfo.input_skp_name)
  return input_skp_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SkiPassRunInfo::set_allocated_input_skp_name(std::string* input_skp_name) {
  if (input_skp_name != nullptr) {
    
  } else {
    
  }
  input_skp_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), input_skp_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ski_pass.protos.SkiPassRunInfo.input_skp_name)
}
inline std::string* SkiPassRunInfo::unsafe_arena_release_input_skp_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ski_pass.protos.SkiPassRunInfo.input_skp_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return input_skp_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SkiPassRunInfo::unsafe_arena_set_allocated_input_skp_name(
    std::string* input_skp_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (input_skp_name != nullptr) {
    
  } else {
    
  }
  input_skp_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      input_skp_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ski_pass.protos.SkiPassRunInfo.input_skp_name)
}

// string debug_log = 2;
inline void SkiPassRunInfo::clear_debug_log() {
  debug_log_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SkiPassRunInfo::debug_log() const {
  // @@protoc_insertion_point(field_get:ski_pass.protos.SkiPassRunInfo.debug_log)
  return _internal_debug_log();
}
inline void SkiPassRunInfo::set_debug_log(const std::string& value) {
  _internal_set_debug_log(value);
  // @@protoc_insertion_point(field_set:ski_pass.protos.SkiPassRunInfo.debug_log)
}
inline std::string* SkiPassRunInfo::mutable_debug_log() {
  // @@protoc_insertion_point(field_mutable:ski_pass.protos.SkiPassRunInfo.debug_log)
  return _internal_mutable_debug_log();
}
inline const std::string& SkiPassRunInfo::_internal_debug_log() const {
  return debug_log_.Get();
}
inline void SkiPassRunInfo::_internal_set_debug_log(const std::string& value) {
  
  debug_log_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SkiPassRunInfo::set_debug_log(std::string&& value) {
  
  debug_log_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ski_pass.protos.SkiPassRunInfo.debug_log)
}
inline void SkiPassRunInfo::set_debug_log(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  debug_log_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ski_pass.protos.SkiPassRunInfo.debug_log)
}
inline void SkiPassRunInfo::set_debug_log(const char* value,
    size_t size) {
  
  debug_log_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ski_pass.protos.SkiPassRunInfo.debug_log)
}
inline std::string* SkiPassRunInfo::_internal_mutable_debug_log() {
  
  return debug_log_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SkiPassRunInfo::release_debug_log() {
  // @@protoc_insertion_point(field_release:ski_pass.protos.SkiPassRunInfo.debug_log)
  return debug_log_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SkiPassRunInfo::set_allocated_debug_log(std::string* debug_log) {
  if (debug_log != nullptr) {
    
  } else {
    
  }
  debug_log_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), debug_log,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ski_pass.protos.SkiPassRunInfo.debug_log)
}
inline std::string* SkiPassRunInfo::unsafe_arena_release_debug_log() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ski_pass.protos.SkiPassRunInfo.debug_log)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return debug_log_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SkiPassRunInfo::unsafe_arena_set_allocated_debug_log(
    std::string* debug_log) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (debug_log != nullptr) {
    
  } else {
    
  }
  debug_log_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      debug_log, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ski_pass.protos.SkiPassRunInfo.debug_log)
}

// .ski_pass.protos.SkiPassRunStatus run_status = 3;
inline void SkiPassRunInfo::clear_run_status() {
  run_status_ = 0;
}
inline ::ski_pass::protos::SkiPassRunStatus SkiPassRunInfo::_internal_run_status() const {
  return static_cast< ::ski_pass::protos::SkiPassRunStatus >(run_status_);
}
inline ::ski_pass::protos::SkiPassRunStatus SkiPassRunInfo::run_status() const {
  // @@protoc_insertion_point(field_get:ski_pass.protos.SkiPassRunInfo.run_status)
  return _internal_run_status();
}
inline void SkiPassRunInfo::_internal_set_run_status(::ski_pass::protos::SkiPassRunStatus value) {
  
  run_status_ = value;
}
inline void SkiPassRunInfo::set_run_status(::ski_pass::protos::SkiPassRunStatus value) {
  _internal_set_run_status(value);
  // @@protoc_insertion_point(field_set:ski_pass.protos.SkiPassRunInfo.run_status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace ski_pass

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ski_pass::protos::SkiPassRunStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ski_pass::protos::SkiPassRunStatus>() {
  return ::ski_pass::protos::SkiPassRunStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ski_5fpass_2eproto
